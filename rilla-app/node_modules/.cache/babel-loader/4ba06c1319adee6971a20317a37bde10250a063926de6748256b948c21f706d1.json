{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport FloatingNoteBox from './FloatingNoteBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extractTextContent = content => {\n  if (Array.isArray(content)) {\n    return content.map(utterance => utterance.text).join(' ');\n  } else if (typeof content === 'string') {\n    try {\n      const parsedContent = JSON.parse(content);\n      if (parsedContent.results && parsedContent.results.channels) {\n        return parsedContent.results.channels[0].alternatives[0].transcript;\n      }\n    } catch (error) {\n      // If parsing fails, return the original string\n    }\n    return content;\n  }\n  return 'No content available';\n};\nconst Dashboard = ({\n  onAudioRecordingStart,\n  onAudioRecordingStop\n}) => {\n  _s();\n  const [transcripts, setTranscripts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [selectedText, setSelectedText] = useState({\n    start: 0,\n    end: 0,\n    text: ''\n  });\n  const [comments, setComments] = useState([]);\n  const [commentType, setCommentType] = useState('positive');\n  const [commentFile, setCommentFile] = useState(null);\n  const [commentContent, setCommentContent] = useState('');\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [hoveredNote, setHoveredNote] = useState(null);\n  const [pinnedNote, setPinnedNote] = useState(null);\n  const handleFileChange = event => {\n    if (event.target.files) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('transcript', selectedFile);\n    try {\n      const response = await axios.post('http://localhost:8000/upload-transcript', formData);\n      console.log('Transcript uploaded successfully:', response.data);\n      setSelectedFile(null);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading transcript:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload transcript: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload transcript. Please try again.');\n      }\n    }\n  };\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map(transcript => ({\n        ...transcript,\n        content: extractTextContent(transcript.content)\n      }));\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n  const handleTranscriptClick = async transcript => {\n    setSelectedTranscript(transcript);\n    await fetchCommentsForTranscript(transcript.transcriptId);\n  };\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0 && selectedTranscript) {\n      const range = selection.getRangeAt(0);\n      const preSelectionRange = range.cloneRange();\n      const parentElement = range.commonAncestorContainer.nodeType === Node.TEXT_NODE ? range.commonAncestorContainer.parentElement : range.commonAncestorContainer;\n      if (parentElement) {\n        preSelectionRange.selectNodeContents(parentElement);\n        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n        const start = preSelectionRange.toString().length;\n        const end = start + range.toString().length;\n        const text = selection.toString();\n        if (text.length > 0) {\n          setSelectedText({\n            start: Number(start),\n            end: Number(end),\n            text\n          });\n        }\n      }\n    }\n  };\n  const highlightText = (content, comments) => {\n    const highlights = comments.flatMap(comment => [{\n      index: comment.startIndex || 0,\n      type: 'start',\n      commentId: comment.commentId,\n      commentType: comment.type\n    }, {\n      index: comment.endIndex || 0,\n      type: 'end',\n      commentId: comment.commentId,\n      commentType: comment.type\n    }]).sort((a, b) => a.index - b.index || (a.type === 'start' ? -1 : 1));\n    let result = [];\n    let lastIndex = 0;\n    let activeHighlights = {};\n    for (let i = 0; i < highlights.length; i++) {\n      const highlight = highlights[i];\n      if (highlight.index > lastIndex) {\n        result.push(content.slice(lastIndex, highlight.index));\n      }\n      if (highlight.type === 'start') {\n        activeHighlights[highlight.commentId] = highlight.commentType;\n      } else {\n        delete activeHighlights[highlight.commentId];\n      }\n      const backgroundColor = Object.values(activeHighlights).reduce((color, type) => {\n        if (type === 'negative') return 'lightcoral';\n        if (type === 'positive') return color === 'lightcoral' ? 'lightyellow' : 'lightgreen';\n        return 'lightyellow';\n      }, 'transparent');\n      if (Object.keys(activeHighlights).length > 0) {\n        var _highlights;\n        const nextIndex = ((_highlights = highlights[i + 1]) === null || _highlights === void 0 ? void 0 : _highlights.index) || content.length;\n        result.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor,\n            position: 'relative'\n          },\n          \"data-comment-id\": Object.keys(activeHighlights).join(','),\n          \"data-comment-content\": Object.keys(activeHighlights).map(id => {\n            const comment = comments.find(c => c.commentId === id);\n            return comment ? `Comment: ${comment.content}` : '';\n          }).join('\\n\\n'),\n          \"data-comment-type\": Object.values(activeHighlights).map(id => {\n            var _comments$find;\n            return (_comments$find = comments.find(c => c.commentId === id)) === null || _comments$find === void 0 ? void 0 : _comments$find.type;\n          }).join(','),\n          onMouseEnter: handleHighlightHover,\n          onMouseLeave: handleHighlightLeave,\n          onClick: handleHighlightClick,\n          children: content.slice(highlight.index, nextIndex)\n        }, `highlight-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this));\n        lastIndex = nextIndex;\n      } else {\n        lastIndex = highlight.index;\n      }\n    }\n    if (lastIndex < content.length) {\n      result.push(content.slice(lastIndex));\n    }\n    return result;\n  };\n  const addOrUpdateComment = async () => {\n    if (!selectedTranscript || !commentContent || !selectedText.text) return;\n    const commentData = {\n      transcriptId: selectedTranscript.transcriptId,\n      userId: 'currentUserId',\n      content: commentContent,\n      timestamp: new Date().toISOString(),\n      startIndex: selectedText.start,\n      endIndex: selectedText.end,\n      type: commentType,\n      commentId: editingCommentId || undefined\n    };\n    try {\n      let response;\n      if (editingCommentId) {\n        response = await axios.put(`http://localhost:8000/api/comments/${editingCommentId}`, commentData);\n      } else {\n        response = await axios.post('http://localhost:8000/api/comments', commentData);\n        response = await axios.post('http://localhost:8000/api/comment', commentData);\n      }\n      const updatedComment = response.data.comment || response.data.updatedAttributes;\n      setComments(prevComments => {\n        if (editingCommentId) {\n          return prevComments.map(comment => comment.commentId === editingCommentId ? {\n            ...comment,\n            ...updatedComment\n          } : comment);\n        } else {\n          return [...prevComments, updatedComment];\n        }\n      });\n\n      // Update the comments in the selectedTranscript\n      setSelectedTranscript(prevTranscript => {\n        if (!prevTranscript) return prevTranscript;\n        const updatedComments = JSON.parse(prevTranscript.comments || '[]');\n        const commentIndex = updatedComments.findIndex(c => c.commentId === updatedComment.commentId);\n        if (commentIndex !== -1) {\n          updatedComments[commentIndex] = updatedComment;\n        } else {\n          updatedComments.push(updatedComment);\n        }\n        return {\n          ...prevTranscript,\n          comments: JSON.stringify(updatedComments)\n        };\n      });\n      setCommentContent('');\n      setCommentType('positive');\n      setCommentFile(null);\n      setSelectedText({\n        start: 0,\n        end: 0,\n        text: ''\n      });\n      setEditingCommentId(null);\n      setError(null);\n    } catch (error) {\n      console.error('Error adding/updating comment:', error);\n      setError('Failed to add/update comment. Please try again.');\n    }\n  };\n  const deleteComment = async commentId => {\n    if (!selectedTranscript) return;\n    try {\n      await axios.delete(`http://localhost:8000/api/comment`, {\n        data: {\n          transcriptId: selectedTranscript.transcriptId,\n          commentId\n        }\n      });\n      setComments(prevComments => prevComments.filter(comment => comment.commentId !== commentId));\n      setSelectedTranscript(prevTranscript => {\n        if (!prevTranscript) return prevTranscript;\n        const updatedComments = JSON.parse(prevTranscript.comments || '[]').filter(c => c.commentId !== commentId);\n        return {\n          ...prevTranscript,\n          comments: JSON.stringify(updatedComments)\n        };\n      });\n      setError(null);\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      setError('Failed to delete comment. Please try again.');\n    }\n  };\n  useEffect(() => {\n    if (selectedTranscript) {\n      fetchCommentsForTranscript(selectedTranscript.transcriptId);\n    }\n  }, [selectedTranscript]);\n  const fetchCommentsForTranscript = async transcriptId => {\n    try {\n      const response = await axios.get(`http://localhost:8000/api/transcripts/${transcriptId}`);\n      const transcript = response.data;\n      const updatedComments = JSON.parse(transcript.comments || '[]').map(comment => ({\n        ...comment,\n        startIndex: Number(comment.startIndex),\n        endIndex: Number(comment.endIndex)\n      }));\n      setComments(updatedComments);\n      setSelectedTranscript(transcript);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n      setError('Failed to fetch comments. Please try again.');\n    }\n  };\n  const handleHighlightHover = event => {\n    const target = event.target;\n    if (target.dataset.commentId) {\n      const rect = target.getBoundingClientRect();\n      const scrollY = window.scrollY || window.pageYOffset;\n      const content = target.dataset.commentContent || '';\n      setHoveredNote({\n        content,\n        position: {\n          x: rect.left + rect.width / 2,\n          y: rect.top + scrollY\n        }\n      });\n    }\n  };\n  const handleHighlightLeave = () => {\n    setHoveredNote(null);\n  };\n  const handleHighlightClick = event => {\n    const target = event.target;\n    if (target.dataset.commentId) {\n      const rect = target.getBoundingClientRect();\n      const scrollY = window.scrollY || window.pageYOffset;\n      const commentIds = target.dataset.commentId.split(',');\n      const content = commentIds.map(id => {\n        const comment = comments.find(c => c.commentId === id);\n        return comment ? `Type: ${comment.type}\\nComment: ${comment.content}` : '';\n      }).join('\\n\\n');\n      setPinnedNote({\n        content,\n        position: {\n          x: rect.left + rect.width / 2,\n          y: rect.top + scrollY\n        }\n      });\n    } else {\n      setPinnedNote(null);\n    }\n  };\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (pinnedNote && !event.target.closest('[data-comment-id]')) {\n        setPinnedNote(null);\n      }\n    };\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [pinnedNote]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transcripts Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRecordButtonClick,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \".txt,.json,.pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        disabled: !selectedFile,\n        children: \"Upload Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading transcripts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-list\",\n      children: transcripts.map(transcript => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-item\",\n        onClick: () => handleTranscriptClick(transcript),\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: transcript.transcriptId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 15\n        }, this)\n      }, transcript.transcriptId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 9\n    }, this), selectedTranscript && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        style: {\n          display: 'flex',\n          maxWidth: '90%',\n          maxHeight: '90%',\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setSelectedTranscript(null),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transcript-text\",\n          style: {\n            flex: '1',\n            marginRight: '20px',\n            overflowY: 'auto'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedTranscript.transcriptId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onMouseUp: handleTextSelection,\n            onMouseOver: handleHighlightHover,\n            onMouseOut: handleHighlightLeave,\n            children: highlightText(selectedTranscript.content, comments)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-controls\",\n          style: {\n            width: '300px',\n            overflowY: 'auto'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: commentContent,\n            onChange: e => setCommentContent(e.target.value),\n            placeholder: \"Enter your comment\",\n            style: {\n              width: '100%',\n              minHeight: '100px',\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: commentType,\n            onChange: e => setCommentType(e.target.value),\n            style: {\n              width: '100%',\n              marginBottom: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"positive\",\n              children: \"Positive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"negative\",\n              children: \"Negative\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"suggestion\",\n              children: \"Suggestion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: e => e.target.files && setCommentFile(e.target.files[0]),\n            style: {\n              marginBottom: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addOrUpdateComment,\n            className: \"comment-button\",\n            style: {\n              backgroundColor: '#4CAF50',\n              color: 'white',\n              width: '100%'\n            },\n            children: editingCommentId ? 'Update Comment' : 'Add Comment'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 15\n          }, this), editingCommentId && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setEditingCommentId(null);\n              setCommentContent('');\n              setCommentType('positive');\n              setCommentFile(null);\n            },\n            className: \"comment-button\",\n            style: {\n              backgroundColor: '#f44336',\n              color: 'white',\n              width: '100%'\n            },\n            children: \"Cancel Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-box\",\n              \"data-comment-id\": comment.commentId,\n              style: {\n                borderLeft: `5px solid ${comment.type === 'negative' ? 'lightcoral' : comment.type === 'positive' ? 'lightgreen' : 'lightyellow'}`\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Selected text:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 24\n                }, this), \" \", selectedTranscript.content.slice(comment.startIndex, comment.endIndex)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Comment:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 24\n                }, this), \" \", comment.content]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Type:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 507,\n                  columnNumber: 24\n                }, this), \" \", comment.type]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 21\n              }, this), comment.fileAttachment && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Attachment:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 51\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: comment.fileAttachment,\n                  children: \"View File\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 80\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 48\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"comment-button delete-button\",\n                  onClick: () => deleteComment(comment.commentId),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"comment-button edit-button\",\n                  onClick: () => {\n                    setEditingCommentId(comment.commentId);\n                    setCommentContent(comment.content);\n                    setCommentType(comment.type);\n                    setSelectedText({\n                      start: comment.startIndex || 0,\n                      end: comment.endIndex || 0,\n                      text: selectedTranscript.content.slice(comment.startIndex, comment.endIndex)\n                    });\n                  },\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 21\n              }, this)]\n            }, comment.commentId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this)]\n      }, comments.length, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }, this), hoveredNote && !pinnedNote && /*#__PURE__*/_jsxDEV(FloatingNoteBox, {\n      content: hoveredNote.content,\n      position: hoveredNote.position\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 9\n    }, this), pinnedNote && /*#__PURE__*/_jsxDEV(FloatingNoteBox, {\n      content: pinnedNote.content,\n      position: pinnedNote.position\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"18cUp4qY4F6c7Vei+Bew5DDfvBM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","FloatingNoteBox","jsxDEV","_jsxDEV","extractTextContent","content","Array","isArray","map","utterance","text","join","parsedContent","JSON","parse","results","channels","alternatives","transcript","error","Dashboard","onAudioRecordingStart","onAudioRecordingStop","_s","transcripts","setTranscripts","loading","setLoading","setError","isRecording","setIsRecording","selectedTranscript","setSelectedTranscript","selectedFile","setSelectedFile","selectedText","setSelectedText","start","end","comments","setComments","commentType","setCommentType","commentFile","setCommentFile","commentContent","setCommentContent","editingCommentId","setEditingCommentId","hoveredNote","setHoveredNote","pinnedNote","setPinnedNote","handleFileChange","event","target","files","handleFileUpload","formData","FormData","append","response","post","console","log","data","fetchTranscripts","isAxiosError","message","get","formattedTranscripts","handleRecordButtonClick","audioBlob","uploadAudio","handleTranscriptClick","fetchCommentsForTranscript","transcriptId","handleTextSelection","selection","window","getSelection","rangeCount","range","getRangeAt","preSelectionRange","cloneRange","parentElement","commonAncestorContainer","nodeType","Node","TEXT_NODE","selectNodeContents","setEnd","startContainer","startOffset","toString","length","Number","highlightText","highlights","flatMap","comment","index","startIndex","type","commentId","endIndex","sort","a","b","result","lastIndex","activeHighlights","i","highlight","push","slice","backgroundColor","Object","values","reduce","color","keys","_highlights","nextIndex","style","position","id","find","c","_comments$find","onMouseEnter","handleHighlightHover","onMouseLeave","handleHighlightLeave","onClick","handleHighlightClick","children","fileName","_jsxFileName","lineNumber","columnNumber","addOrUpdateComment","commentData","userId","timestamp","Date","toISOString","undefined","put","updatedComment","updatedAttributes","prevComments","prevTranscript","updatedComments","commentIndex","findIndex","stringify","deleteComment","delete","filter","dataset","rect","getBoundingClientRect","scrollY","pageYOffset","x","left","width","y","top","commentIds","split","handleClickOutside","closest","document","addEventListener","removeEventListener","className","onChange","accept","disabled","display","maxWidth","maxHeight","flex","marginRight","overflowY","onMouseUp","onMouseOver","onMouseOut","value","e","placeholder","minHeight","marginBottom","borderLeft","fileAttachment","href","_c","$RefreshReg$"],"sources":["/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport FloatingNoteBox from './FloatingNoteBox';\n\n\ninterface Utterance {\n  speaker: string;\n  text: string;\n}\n\ninterface Transcript {\n  transcriptId: string;\n  content: string;\n  fileType: string;\n}\n\ninterface DashboardProps {\n  onAudioRecordingStart: () => void;\n  onAudioRecordingStop: () => Promise<Blob | null>;\n}\n\ninterface UpdatedComment {\n  commentId: string;\n  content: string;\n  type: string;\n  fileAttachment?: string;\n  startIndex?: number;\n  endIndex?: number;\n}\n\ninterface CommentResponse {\n  comment: UpdatedComment;\n  updatedAttributes: UpdatedComment;\n}\n\ninterface APIComment {\n  commentId: string;\n  content: string;\n  type: string;\n  fileAttachment?: string;\n  startIndex: string | number;\n  endIndex: string | number;\n}\n\nconst extractTextContent = (content: Utterance[] | string): string => {\n  if (Array.isArray(content)) {\n    return content.map(utterance => utterance.text).join(' ');\n  } else if (typeof content === 'string') {\n    try {\n      const parsedContent = JSON.parse(content);\n      if (parsedContent.results && parsedContent.results.channels) {\n        return parsedContent.results.channels[0].alternatives[0].transcript;\n      }\n    } catch (error) {\n      // If parsing fails, return the original string\n    }\n    return content;\n  }\n  return 'No content available';\n};\n\nconst Dashboard: React.FC<DashboardProps> = ({ onAudioRecordingStart, onAudioRecordingStop }) => {\n  const [transcripts, setTranscripts] = useState<Transcript[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState<Transcript | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedText, setSelectedText] = useState({ start: 0, end: 0, text: '' });\n  const [comments, setComments] = useState<Array<{\n    commentId: string;\n    content: string;\n    type: string;\n    fileAttachment?: string;\n    startIndex?: number;\n    endIndex?: number;\n  }>>([]);\n  const [commentType, setCommentType] = useState('positive');\n  const [commentFile, setCommentFile] = useState<File | null>(null);\n  const [commentContent, setCommentContent] = useState('');\n  const [editingCommentId, setEditingCommentId] = useState<string | null>(null);\n  const [hoveredNote, setHoveredNote] = useState<{ content: string; position: { x: number; y: number } } | null>(null);\n  const [pinnedNote, setPinnedNote] = useState<{ content: string; position: { x: number; y: number } } | null>(null);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('transcript', selectedFile);\n\n    try {\n      const response = await axios.post('http://localhost:8000/upload-transcript', formData);\n      console.log('Transcript uploaded successfully:', response.data);\n      setSelectedFile(null);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading transcript:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload transcript: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload transcript. Please try again.');\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get<Transcript[]>('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map((transcript) => ({\n        ...transcript,\n        content: extractTextContent(transcript.content),\n      }));\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n\n  const uploadAudio = async (audioBlob: Blob) => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n\n  const handleTranscriptClick = async (transcript: Transcript) => {\n    setSelectedTranscript(transcript);\n    await fetchCommentsForTranscript(transcript.transcriptId);\n  };\n\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0 && selectedTranscript) {\n      const range = selection.getRangeAt(0);\n      const preSelectionRange = range.cloneRange();\n      const parentElement = range.commonAncestorContainer.nodeType === Node.TEXT_NODE\n        ? range.commonAncestorContainer.parentElement\n        : range.commonAncestorContainer;\n      \n      if (parentElement) {\n        preSelectionRange.selectNodeContents(parentElement);\n        preSelectionRange.setEnd(range.startContainer, range.startOffset);\n        const start = preSelectionRange.toString().length;\n        const end = start + range.toString().length;\n        const text = selection.toString();\n        if (text.length > 0) {\n          setSelectedText({ start: Number(start), end: Number(end), text });\n        }\n      }\n    }\n  };\n\n  const highlightText = (content: string, comments: Array<UpdatedComment>) => {\n    const highlights = comments.flatMap(comment => [\n      { index: comment.startIndex || 0, type: 'start', commentId: comment.commentId, commentType: comment.type },\n      { index: comment.endIndex || 0, type: 'end', commentId: comment.commentId, commentType: comment.type }\n    ]).sort((a, b) => a.index - b.index || (a.type === 'start' ? -1 : 1));\n\n    let result = [];\n    let lastIndex = 0;\n    let activeHighlights: { [key: string]: string } = {};\n\n    for (let i = 0; i < highlights.length; i++) {\n      const highlight = highlights[i];\n      \n      if (highlight.index > lastIndex) {\n        result.push(content.slice(lastIndex, highlight.index));\n      }\n\n      if (highlight.type === 'start') {\n        activeHighlights[highlight.commentId] = highlight.commentType;\n      } else {\n        delete activeHighlights[highlight.commentId];\n      }\n\n      const backgroundColor = Object.values(activeHighlights).reduce((color, type) => {\n        if (type === 'negative') return 'lightcoral';\n        if (type === 'positive') return color === 'lightcoral' ? 'lightyellow' : 'lightgreen';\n        return 'lightyellow';\n      }, 'transparent');\n\n      if (Object.keys(activeHighlights).length > 0) {\n        const nextIndex = highlights[i + 1]?.index || content.length;\n        result.push(\n          <span\n            key={`highlight-${i}`}\n            style={{ backgroundColor, position: 'relative' }}\n            data-comment-id={Object.keys(activeHighlights).join(',')}\n            data-comment-content={Object.keys(activeHighlights).map(id => {\n              const comment = comments.find(c => c.commentId === id);\n              return comment ? `Comment: ${comment.content}` : '';\n            }).join('\\n\\n')}\n            data-comment-type={Object.values(activeHighlights).map(id => comments.find(c => c.commentId === id)?.type).join(',')}\n            onMouseEnter={handleHighlightHover}\n            onMouseLeave={handleHighlightLeave}\n            onClick={handleHighlightClick}\n          >\n            {content.slice(highlight.index, nextIndex)}\n          </span>\n        );\n        lastIndex = nextIndex;\n      } else {\n        lastIndex = highlight.index;\n      }\n    }\n\n    if (lastIndex < content.length) {\n      result.push(content.slice(lastIndex));\n    }\n\n    return result;\n  };\n\n  const addOrUpdateComment = async () => {\n    if (!selectedTranscript || !commentContent || !selectedText.text) return;\n\n    const commentData = {\n      transcriptId: selectedTranscript.transcriptId,\n      userId: 'currentUserId',\n      content: commentContent,\n      timestamp: new Date().toISOString(),\n      startIndex: selectedText.start,\n      endIndex: selectedText.end,\n      type: commentType,\n      commentId: editingCommentId || undefined\n    };\n\n    try {\n      let response;\n      if (editingCommentId) {\n        response = await axios.put<CommentResponse>(`http://localhost:8000/api/comments/${editingCommentId}`, commentData);\n      } else {\n        response = await axios.post<CommentResponse>('http://localhost:8000/api/comments', commentData);\n        response = await axios.post<CommentResponse>('http://localhost:8000/api/comment', commentData);\n      }\n\n      const updatedComment = response.data.comment || response.data.updatedAttributes;\n\n      setComments(prevComments => {\n        if (editingCommentId) {\n          return prevComments.map(comment => \n            comment.commentId === editingCommentId ? {...comment, ...updatedComment} : comment\n          );\n        } else {\n          return [...prevComments, updatedComment];\n        }\n      });\n\n      // Update the comments in the selectedTranscript\n      setSelectedTranscript(prevTranscript => {\n        if (!prevTranscript) return prevTranscript;\n        const updatedComments = JSON.parse(prevTranscript.comments || '[]');\n        const commentIndex = updatedComments.findIndex((c: any) => c.commentId === updatedComment.commentId);\n        if (commentIndex !== -1) {\n          updatedComments[commentIndex] = updatedComment;\n        } else {\n          updatedComments.push(updatedComment);\n        }\n        return {...prevTranscript, comments: JSON.stringify(updatedComments)};\n      });\n\n      setCommentContent('');\n      setCommentType('positive');\n      setCommentFile(null);\n      setSelectedText({ start: 0, end: 0, text: '' });\n      setEditingCommentId(null);\n      setError(null);\n    } catch (error) {\n      console.error('Error adding/updating comment:', error);\n      setError('Failed to add/update comment. Please try again.');\n    }\n  };\n\n  const deleteComment = async (commentId: string) => {\n    if (!selectedTranscript) return;\n    try {\n      await axios.delete(`http://localhost:8000/api/comment`, {\n        data: { transcriptId: selectedTranscript.transcriptId, commentId }\n      });\n      \n      setComments(prevComments => prevComments.filter(comment => comment.commentId !== commentId));\n      \n      setSelectedTranscript(prevTranscript => {\n        if (!prevTranscript) return prevTranscript;\n        const updatedComments = JSON.parse(prevTranscript.comments || '[]').filter((c: any) => c.commentId !== commentId);\n        return {...prevTranscript, comments: JSON.stringify(updatedComments)};\n      });\n\n      setError(null);\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      setError('Failed to delete comment. Please try again.');\n    }\n  };\n\n  useEffect(() => {\n    if (selectedTranscript) {\n      fetchCommentsForTranscript(selectedTranscript.transcriptId);\n    }\n  }, [selectedTranscript]);\n\n  const fetchCommentsForTranscript = async (transcriptId: string) => {\n    try {\n      const response = await axios.get<Transcript>(`http://localhost:8000/api/transcripts/${transcriptId}`);\n      const transcript = response.data;\n      const updatedComments = JSON.parse(transcript.comments || '[]').map((comment: APIComment) => ({\n        ...comment,\n        startIndex: Number(comment.startIndex),\n        endIndex: Number(comment.endIndex)\n      }));\n      setComments(updatedComments);\n      setSelectedTranscript(transcript);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n      setError('Failed to fetch comments. Please try again.');\n    }\n  };\n\n  const handleHighlightHover = (event: React.MouseEvent<HTMLSpanElement>) => {\n    const target = event.target as HTMLSpanElement;\n    if (target.dataset.commentId) {\n      const rect = target.getBoundingClientRect();\n      const scrollY = window.scrollY || window.pageYOffset;\n      const content = target.dataset.commentContent || '';\n      setHoveredNote({\n        content,\n        position: { x: rect.left + rect.width / 2, y: rect.top + scrollY },\n      });\n    }\n  };\n\n  const handleHighlightLeave = () => {\n    setHoveredNote(null);\n  };\n\n  const handleHighlightClick = (event: React.MouseEvent<HTMLSpanElement>) => {\n    const target = event.target as HTMLSpanElement;\n    if (target.dataset.commentId) {\n      const rect = target.getBoundingClientRect();\n      const scrollY = window.scrollY || window.pageYOffset;\n      const commentIds = target.dataset.commentId.split(',');\n      const content = commentIds.map(id => {\n        const comment = comments.find(c => c.commentId === id);\n        return comment ? `Type: ${comment.type}\\nComment: ${comment.content}` : '';\n      }).join('\\n\\n');\n      setPinnedNote({\n        content,\n        position: { x: rect.left + rect.width / 2, y: rect.top + scrollY },\n      });\n    } else {\n      setPinnedNote(null);\n    }\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (pinnedNote && !(event.target as HTMLElement).closest('[data-comment-id]')) {\n        setPinnedNote(null);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [pinnedNote]);\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Transcripts Dashboard</h1>\n      <button onClick={handleRecordButtonClick}>\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      <div className=\"file-upload\">\n        <input type=\"file\" onChange={handleFileChange} accept=\".txt,.json,.pdf\" />\n        <button onClick={handleFileUpload} disabled={!selectedFile}>\n          Upload Transcript\n        </button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n      {loading ? (\n        <p>Loading transcripts...</p>\n      ) : (\n        <div className=\"transcript-list\">\n          {transcripts.map((transcript) => (\n            <div\n              key={transcript.transcriptId}\n              className=\"transcript-item\"\n              onClick={() => handleTranscriptClick(transcript)}\n            >\n              <h3>{transcript.transcriptId}</h3>\n            </div>\n          ))}\n        </div>\n      )}\n      {selectedTranscript && (\n        <div className=\"modal\">\n          <div className=\"modal-content\" key={comments.length} style={{ display: 'flex', maxWidth: '90%', maxHeight: '90%', position: 'relative' }}>\n            <button className=\"close-button\" onClick={() => setSelectedTranscript(null)}>Close</button>\n            <div className=\"transcript-text\" style={{ flex: '1', marginRight: '20px', overflowY: 'auto' }}>\n              <h2>{selectedTranscript.transcriptId}</h2>\n              <div \n                onMouseUp={handleTextSelection}\n                onMouseOver={handleHighlightHover}\n                onMouseOut={handleHighlightLeave}\n              >\n                {highlightText(selectedTranscript.content, comments)}\n              </div>\n            </div>\n            <div className=\"comment-controls\" style={{ width: '300px', overflowY: 'auto' }}>\n              <textarea\n                value={commentContent}\n                onChange={(e) => setCommentContent(e.target.value)}\n                placeholder=\"Enter your comment\"\n                style={{ width: '100%', minHeight: '100px', marginBottom: '10px' }}\n              />\n              <select \n                value={commentType} \n                onChange={(e) => setCommentType(e.target.value)}\n                style={{ width: '100%', marginBottom: '10px' }}\n              >\n                <option value=\"positive\">Positive</option>\n                <option value=\"negative\">Negative</option>\n                <option value=\"suggestion\">Suggestion</option>\n              </select>\n              <input \n                type=\"file\" \n                onChange={(e) => e.target.files && setCommentFile(e.target.files[0])} \n                style={{ marginBottom: '10px' }}\n              />\n              <button \n                onClick={addOrUpdateComment}\n                className=\"comment-button\"\n                style={{ backgroundColor: '#4CAF50', color: 'white', width: '100%' }}\n              >\n                {editingCommentId ? 'Update Comment' : 'Add Comment'}\n              </button>\n              {editingCommentId && (\n                <button \n                  onClick={() => {\n                    setEditingCommentId(null);\n                    setCommentContent('');\n                    setCommentType('positive');\n                    setCommentFile(null);\n                  }}\n                  className=\"comment-button\"\n                  style={{ backgroundColor: '#f44336', color: 'white', width: '100%' }}\n                >\n                  Cancel Edit\n                </button>\n              )}\n              <div>\n                {comments.map(comment => (\n                  <div \n                    key={comment.commentId} \n                    className=\"comment-box\" \n                    data-comment-id={comment.commentId}\n                    style={{\n                      borderLeft: `5px solid ${comment.type === 'negative' ? 'lightcoral' : comment.type === 'positive' ? 'lightgreen' : 'lightyellow'}`\n                    }}\n                  >\n                    <p><strong>Selected text:</strong> {selectedTranscript.content.slice(comment.startIndex, comment.endIndex)}</p>\n                    <p><strong>Comment:</strong> {comment.content}</p>\n                    <p><strong>Type:</strong> {comment.type}</p>\n                    {comment.fileAttachment && <p><strong>Attachment:</strong> <a href={comment.fileAttachment}>View File</a></p>}\n                    <div className=\"comment-buttons\">\n                      <button className=\"comment-button delete-button\" onClick={() => deleteComment(comment.commentId)}>Delete</button>\n                      <button className=\"comment-button edit-button\" onClick={() => {\n                        setEditingCommentId(comment.commentId);\n                        setCommentContent(comment.content);\n                        setCommentType(comment.type);\n                        setSelectedText({\n                          start: comment.startIndex || 0,\n                          end: comment.endIndex || 0,\n                          text: selectedTranscript.content.slice(comment.startIndex, comment.endIndex)\n                        });\n                      }}>Edit</button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {hoveredNote && !pinnedNote && (\n        <FloatingNoteBox\n          content={hoveredNote.content}\n          position={hoveredNote.position}\n        />\n      )}\n      {pinnedNote && (\n        <FloatingNoteBox\n          content={pinnedNote.content}\n          position={pinnedNote.position}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}