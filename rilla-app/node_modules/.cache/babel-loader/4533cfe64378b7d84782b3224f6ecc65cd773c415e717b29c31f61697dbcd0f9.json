{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getCacheKey } from \"./getCacheKey\";\nimport { updateDiscoveredEndpointInCache } from \"./updateDiscoveredEndpointInCache\";\nexport const endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async args => {\n  if (config.isCustomEndpoint) {\n    if (config.isClientEndpointDiscoveryEnabled) {\n      throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);\n    }\n    return next(args);\n  }\n  const {\n    endpointDiscoveryCommandCtor\n  } = config;\n  const {\n    isDiscoveredEndpointRequired,\n    identifiers\n  } = middlewareConfig;\n  const clientName = context.clientName;\n  const commandName = context.commandName;\n  const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();\n  const cacheKey = await getCacheKey(commandName, config, {\n    identifiers\n  });\n  if (isDiscoveredEndpointRequired) {\n    if (isEndpointDiscoveryEnabled === false) {\n      throw new Error(`Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it.` + ` Please check your configurations.`);\n    }\n    await updateDiscoveredEndpointInCache(config, {\n      ...middlewareConfig,\n      commandName,\n      cacheKey,\n      endpointDiscoveryCommandCtor\n    });\n  } else if (isEndpointDiscoveryEnabled) {\n    updateDiscoveredEndpointInCache(config, {\n      ...middlewareConfig,\n      commandName,\n      cacheKey,\n      endpointDiscoveryCommandCtor\n    });\n  }\n  const {\n    request\n  } = args;\n  if (cacheKey && HttpRequest.isInstance(request)) {\n    const endpoint = config.endpointCache.getEndpoint(cacheKey);\n    if (endpoint) {\n      request.hostname = endpoint;\n    }\n  }\n  return next(args);\n};","map":{"version":3,"names":["HttpRequest","getCacheKey","updateDiscoveredEndpointInCache","endpointDiscoveryMiddleware","config","middlewareConfig","next","context","args","isCustomEndpoint","isClientEndpointDiscoveryEnabled","Error","endpointDiscoveryCommandCtor","isDiscoveredEndpointRequired","identifiers","clientName","commandName","isEndpointDiscoveryEnabled","endpointDiscoveryEnabled","cacheKey","request","isInstance","endpoint","endpointCache","getEndpoint","hostname"],"sources":["/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/endpointDiscoveryMiddleware.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getCacheKey } from \"./getCacheKey\";\nimport { updateDiscoveredEndpointInCache } from \"./updateDiscoveredEndpointInCache\";\nexport const endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {\n    if (config.isCustomEndpoint) {\n        if (config.isClientEndpointDiscoveryEnabled) {\n            throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);\n        }\n        return next(args);\n    }\n    const { endpointDiscoveryCommandCtor } = config;\n    const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;\n    const clientName = context.clientName;\n    const commandName = context.commandName;\n    const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();\n    const cacheKey = await getCacheKey(commandName, config, { identifiers });\n    if (isDiscoveredEndpointRequired) {\n        if (isEndpointDiscoveryEnabled === false) {\n            throw new Error(`Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it.` +\n                ` Please check your configurations.`);\n        }\n        await updateDiscoveredEndpointInCache(config, {\n            ...middlewareConfig,\n            commandName,\n            cacheKey,\n            endpointDiscoveryCommandCtor,\n        });\n    }\n    else if (isEndpointDiscoveryEnabled) {\n        updateDiscoveredEndpointInCache(config, {\n            ...middlewareConfig,\n            commandName,\n            cacheKey,\n            endpointDiscoveryCommandCtor,\n        });\n    }\n    const { request } = args;\n    if (cacheKey && HttpRequest.isInstance(request)) {\n        const endpoint = config.endpointCache.getEndpoint(cacheKey);\n        if (endpoint) {\n            request.hostname = endpoint;\n        }\n    }\n    return next(args);\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,OAAO,MAAMC,2BAA2B,GAAGA,CAACC,MAAM,EAAEC,gBAAgB,KAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EACxG,IAAIJ,MAAM,CAACK,gBAAgB,EAAE;IACzB,IAAIL,MAAM,CAACM,gCAAgC,EAAE;MACzC,MAAM,IAAIC,KAAK,CAAC,yEAAyE,CAAC;IAC9F;IACA,OAAOL,IAAI,CAACE,IAAI,CAAC;EACrB;EACA,MAAM;IAAEI;EAA6B,CAAC,GAAGR,MAAM;EAC/C,MAAM;IAAES,4BAA4B;IAAEC;EAAY,CAAC,GAAGT,gBAAgB;EACtE,MAAMU,UAAU,GAAGR,OAAO,CAACQ,UAAU;EACrC,MAAMC,WAAW,GAAGT,OAAO,CAACS,WAAW;EACvC,MAAMC,0BAA0B,GAAG,MAAMb,MAAM,CAACc,wBAAwB,CAAC,CAAC;EAC1E,MAAMC,QAAQ,GAAG,MAAMlB,WAAW,CAACe,WAAW,EAAEZ,MAAM,EAAE;IAAEU;EAAY,CAAC,CAAC;EACxE,IAAID,4BAA4B,EAAE;IAC9B,IAAII,0BAA0B,KAAK,KAAK,EAAE;MACtC,MAAM,IAAIN,KAAK,CAAC,sCAAsCK,WAAW,OAAOD,UAAU,eAAe,GAC7F,oCAAoC,CAAC;IAC7C;IACA,MAAMb,+BAA+B,CAACE,MAAM,EAAE;MAC1C,GAAGC,gBAAgB;MACnBW,WAAW;MACXG,QAAQ;MACRP;IACJ,CAAC,CAAC;EACN,CAAC,MACI,IAAIK,0BAA0B,EAAE;IACjCf,+BAA+B,CAACE,MAAM,EAAE;MACpC,GAAGC,gBAAgB;MACnBW,WAAW;MACXG,QAAQ;MACRP;IACJ,CAAC,CAAC;EACN;EACA,MAAM;IAAEQ;EAAQ,CAAC,GAAGZ,IAAI;EACxB,IAAIW,QAAQ,IAAInB,WAAW,CAACqB,UAAU,CAACD,OAAO,CAAC,EAAE;IAC7C,MAAME,QAAQ,GAAGlB,MAAM,CAACmB,aAAa,CAACC,WAAW,CAACL,QAAQ,CAAC;IAC3D,IAAIG,QAAQ,EAAE;MACVF,OAAO,CAACK,QAAQ,GAAGH,QAAQ;IAC/B;EACJ;EACA,OAAOhB,IAAI,CAACE,IAAI,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}