{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extractTextContent = content => {\n  if (Array.isArray(content)) {\n    return content.map(utterance => utterance.text).join(' ');\n  } else if (typeof content === 'string') {\n    try {\n      const parsedContent = JSON.parse(content);\n      if (parsedContent.results && parsedContent.results.channels) {\n        return parsedContent.results.channels[0].alternatives[0].transcript;\n      }\n    } catch (error) {\n      // If parsing fails, return the original string\n    }\n    return content;\n  }\n  return 'No content available';\n};\nconst Dashboard = ({\n  onAudioRecordingStart,\n  onAudioRecordingStop\n}) => {\n  _s();\n  const [transcripts, setTranscripts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [selectedText, setSelectedText] = useState({\n    start: 0,\n    end: 0,\n    text: ''\n  });\n  const [comments, setComments] = useState([]);\n  const [commentType, setCommentType] = useState('positive');\n  const [commentFile, setCommentFile] = useState(null);\n  const [commentContent, setCommentContent] = useState('');\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const handleFileChange = event => {\n    if (event.target.files) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('transcript', selectedFile);\n    try {\n      const response = await axios.post('http://localhost:8000/upload-transcript', formData);\n      console.log('Transcript uploaded successfully:', response.data);\n      setSelectedFile(null);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading transcript:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload transcript: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload transcript. Please try again.');\n      }\n    }\n  };\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map((transcript, index) => {\n        const extractedContent = extractTextContent(transcript.content);\n        return {\n          transcriptId: `Transcript ${index + 1}`,\n          content: extractedContent,\n          fileType: transcript.fileType\n        };\n      });\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n  const handleTranscriptClick = transcript => {\n    setSelectedTranscript(transcript);\n  };\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const preSelectionRange = range.cloneRange();\n      preSelectionRange.selectNodeContents(range.startContainer.parentElement);\n      preSelectionRange.setEnd(range.startContainer, range.startOffset);\n      const start = preSelectionRange.toString().length;\n      const text = selection.toString();\n      setSelectedText({\n        start,\n        end: start + text.length,\n        text\n      });\n    }\n  };\n  const highlightText = (content, comments) => {\n    const sortedComments = comments.sort((a, b) => (a.startIndex || 0) - (b.startIndex || 0));\n    let lastIndex = 0;\n    const parts = [];\n    sortedComments.forEach(comment => {\n      if (comment.startIndex !== undefined && comment.endIndex !== undefined) {\n        if (comment.startIndex > lastIndex) {\n          parts.push(content.slice(lastIndex, comment.startIndex));\n        }\n        parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: comment.type === 'positive' ? 'lightgreen' : comment.type === 'negative' ? 'lightcoral' : 'lightyellow'\n          },\n          children: content.slice(comment.startIndex, comment.endIndex)\n        }, comment.commentId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this));\n        lastIndex = comment.endIndex;\n      }\n    });\n    parts.push(content.slice(lastIndex));\n    return parts;\n  };\n  const addOrUpdateComment = async () => {\n    if (!selectedTranscript || !commentContent || !selectedText.text) return;\n    const formData = new FormData();\n    formData.append('transcriptId', selectedTranscript.transcriptId);\n    formData.append('userId', 'currentUserId'); // Replace with actual user ID\n    formData.append('content', commentContent);\n    formData.append('timestamp', new Date().toISOString());\n    formData.append('startIndex', selectedText.start.toString());\n    formData.append('endIndex', selectedText.end.toString());\n    formData.append('type', commentType);\n    if (commentFile) {\n      formData.append('fileAttachment', commentFile);\n    }\n    try {\n      let response;\n      if (editingCommentId) {\n        const {\n          data\n        } = await axios.put(`http://localhost:8000/api/comment`, {\n          ...Object.fromEntries(formData),\n          commentId: editingCommentId\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        response = data;\n        setComments(prevComments => prevComments.map(comment => comment.commentId === editingCommentId ? response.updatedAttributes : comment));\n      } else {\n        const {\n          data\n        } = await axios.post('http://localhost:8000/api/comment', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        response = data;\n        setComments(prevComments => [...prevComments, response.comment]);\n      }\n      setCommentContent('');\n      setCommentFile(null);\n      setSelectedText({\n        start: 0,\n        end: 0,\n        text: ''\n      });\n      setEditingCommentId(null);\n    } catch (error) {\n      console.error('Error adding/updating comment:', error);\n      setError('Failed to add/update comment. Please try again.');\n    }\n  };\n  const deleteComment = async commentId => {\n    if (!selectedTranscript) return;\n    try {\n      await axios.delete(`http://localhost:8000/api/comment`, {\n        data: {\n          transcriptId: selectedTranscript.transcriptId,\n          commentId\n        }\n      });\n      setComments(prevComments => prevComments.filter(comment => comment.commentId !== commentId));\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      setError('Failed to delete comment. Please try again.');\n    }\n  };\n  useEffect(() => {\n    if (selectedTranscript) {\n      fetchCommentsForTranscript(selectedTranscript.transcriptId);\n    }\n  }, [selectedTranscript]);\n  const fetchCommentsForTranscript = async transcriptId => {\n    try {\n      const response = await axios.get(`http://localhost:8000/api/comment?transcriptId=${transcriptId}`);\n      setComments(response.data);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n      setError('Failed to fetch comments. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transcripts Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRecordButtonClick,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \".txt,.json,.pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        disabled: !selectedFile,\n        children: \"Upload Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading transcripts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-list\",\n      children: transcripts.map(transcript => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-item\",\n        onClick: () => handleTranscriptClick(transcript),\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: transcript.transcriptId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }, this)\n      }, transcript.transcriptId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this), selectedTranscript && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transcript-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedTranscript.transcriptId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onMouseUp: handleTextSelection,\n            children: highlightText(selectedTranscript.content, comments)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: commentContent,\n            onChange: e => setCommentContent(e.target.value),\n            placeholder: \"Enter your comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: commentType,\n            onChange: e => setCommentType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"positive\",\n              children: \"Positive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"negative\",\n              children: \"Negative\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"suggestion\",\n              children: \"Suggestion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: e => e.target.files && setCommentFile(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addOrUpdateComment,\n            children: editingCommentId ? 'Update Comment' : 'Add Comment'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), editingCommentId && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setEditingCommentId(null);\n              setCommentContent('');\n              setCommentType('positive');\n              setCommentFile(null);\n            },\n            children: \"Cancel Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundColor: comment.type === 'negative' ? 'lightcoral' : comment.type === 'positive' ? 'lightgreen' : 'lightyellow',\n                padding: '10px',\n                margin: '10px 0'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Selected text:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 24\n                }, this), \" \", selectedTranscript.content.slice(comment.startIndex, comment.endIndex)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Comment:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 24\n                }, this), \" \", comment.content]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", comment.type]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 21\n              }, this), comment.fileAttachment && /*#__PURE__*/_jsxDEV(\"a\", {\n                href: comment.fileAttachment,\n                children: \"Attached File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 48\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteComment(comment.commentId),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setEditingCommentId(comment.commentId);\n                  setCommentContent(comment.content);\n                  setCommentType(comment.type);\n                  setSelectedText({\n                    start: comment.startIndex || 0,\n                    end: comment.endIndex || 0,\n                    text: selectedTranscript.content.slice(comment.startIndex, comment.endIndex)\n                  });\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 21\n              }, this)]\n            }, comment.commentId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedTranscript(null),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"k+Xtb3eSonVjFHfluhwi7gX9c/o=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","extractTextContent","content","Array","isArray","map","utterance","text","join","parsedContent","JSON","parse","results","channels","alternatives","transcript","error","Dashboard","onAudioRecordingStart","onAudioRecordingStop","_s","transcripts","setTranscripts","loading","setLoading","setError","isRecording","setIsRecording","selectedTranscript","setSelectedTranscript","selectedFile","setSelectedFile","selectedText","setSelectedText","start","end","comments","setComments","commentType","setCommentType","commentFile","setCommentFile","commentContent","setCommentContent","editingCommentId","setEditingCommentId","handleFileChange","event","target","files","handleFileUpload","formData","FormData","append","response","post","console","log","data","fetchTranscripts","isAxiosError","message","get","formattedTranscripts","index","extractedContent","transcriptId","fileType","handleRecordButtonClick","audioBlob","uploadAudio","handleTranscriptClick","handleTextSelection","selection","window","getSelection","rangeCount","range","getRangeAt","preSelectionRange","cloneRange","selectNodeContents","startContainer","parentElement","setEnd","startOffset","toString","length","highlightText","sortedComments","sort","a","b","startIndex","lastIndex","parts","forEach","comment","undefined","endIndex","push","slice","style","backgroundColor","type","children","commentId","fileName","_jsxFileName","lineNumber","columnNumber","addOrUpdateComment","Date","toISOString","put","Object","fromEntries","headers","prevComments","updatedAttributes","deleteComment","delete","filter","fetchCommentsForTranscript","className","onClick","onChange","accept","disabled","onMouseUp","value","e","placeholder","padding","margin","fileAttachment","href","_c","$RefreshReg$"],"sources":["/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\n\n\ninterface Utterance {\n  speaker: string;\n  text: string;\n}\n\ninterface Transcript {\n  transcriptId: string;\n  content: string;\n  fileType: string;\n}\n\ninterface DashboardProps {\n  onAudioRecordingStart: () => void;\n  onAudioRecordingStop: () => Promise<Blob | null>;\n}\n\ninterface UpdatedComment {\n  commentId: string;\n  content: string;\n  type: string;\n  fileAttachment?: string;\n  startIndex?: number;\n  endIndex?: number;\n}\n\ninterface CommentResponse {\n  comment: UpdatedComment;\n  updatedAttributes: UpdatedComment;\n}\n\nconst extractTextContent = (content: Utterance[] | string): string => {\n  if (Array.isArray(content)) {\n    return content.map(utterance => utterance.text).join(' ');\n  } else if (typeof content === 'string') {\n    try {\n      const parsedContent = JSON.parse(content);\n      if (parsedContent.results && parsedContent.results.channels) {\n        return parsedContent.results.channels[0].alternatives[0].transcript;\n      }\n    } catch (error) {\n      // If parsing fails, return the original string\n    }\n    return content;\n  }\n  return 'No content available';\n};\n\nconst Dashboard: React.FC<DashboardProps> = ({ onAudioRecordingStart, onAudioRecordingStop }) => {\n  const [transcripts, setTranscripts] = useState<Transcript[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState<Transcript | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedText, setSelectedText] = useState({ start: 0, end: 0, text: '' });\n  const [comments, setComments] = useState<Array<{\n    commentId: string;\n    content: string;\n    type: string;\n    fileAttachment?: string;\n    startIndex?: number;\n    endIndex?: number;\n  }>>([]);\n  const [commentType, setCommentType] = useState('positive');\n  const [commentFile, setCommentFile] = useState<File | null>(null);\n  const [commentContent, setCommentContent] = useState('');\n  const [editingCommentId, setEditingCommentId] = useState<string | null>(null);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('transcript', selectedFile);\n\n    try {\n      const response = await axios.post('http://localhost:8000/upload-transcript', formData);\n      console.log('Transcript uploaded successfully:', response.data);\n      setSelectedFile(null);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading transcript:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload transcript: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload transcript. Please try again.');\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get<Transcript[]>('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map((transcript, index) => {\n        const extractedContent = extractTextContent(transcript.content);\n        return {\n          transcriptId: `Transcript ${index + 1}`,\n          content: extractedContent,\n          fileType: transcript.fileType\n        };\n      });\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n\n  const uploadAudio = async (audioBlob: Blob) => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n\n  const handleTranscriptClick = (transcript: Transcript) => {\n    setSelectedTranscript(transcript);\n  };\n\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const preSelectionRange = range.cloneRange();\n      preSelectionRange.selectNodeContents(range.startContainer.parentElement);\n      preSelectionRange.setEnd(range.startContainer, range.startOffset);\n      const start = preSelectionRange.toString().length;\n      const text = selection.toString();\n      setSelectedText({ start, end: start + text.length, text });\n    }\n  };\n\n  const highlightText = (content: string, comments: Array<UpdatedComment>) => {\n    const sortedComments = comments.sort((a, b) => (a.startIndex || 0) - (b.startIndex || 0));\n    let lastIndex = 0;\n    const parts = [];\n\n    sortedComments.forEach((comment) => {\n      if (comment.startIndex !== undefined && comment.endIndex !== undefined) {\n        if (comment.startIndex > lastIndex) {\n          parts.push(content.slice(lastIndex, comment.startIndex));\n        }\n        parts.push(\n          <span\n            key={comment.commentId}\n            style={{\n              backgroundColor:\n                comment.type === 'positive'\n                  ? 'lightgreen'\n                  : comment.type === 'negative'\n                  ? 'lightcoral'\n                  : 'lightyellow',\n            }}\n          >\n            {content.slice(comment.startIndex, comment.endIndex)}\n          </span>\n        );\n        lastIndex = comment.endIndex;\n      }\n    });\n\n    parts.push(content.slice(lastIndex));\n\n    return parts;\n  };\n\n  const addOrUpdateComment = async () => {\n    if (!selectedTranscript || !commentContent || !selectedText.text) return;\n\n    const formData = new FormData();\n    formData.append('transcriptId', selectedTranscript.transcriptId);\n    formData.append('userId', 'currentUserId'); // Replace with actual user ID\n    formData.append('content', commentContent);\n    formData.append('timestamp', new Date().toISOString());\n    formData.append('startIndex', selectedText.start.toString());\n    formData.append('endIndex', selectedText.end.toString());\n    formData.append('type', commentType);\n    if (commentFile) {\n      formData.append('fileAttachment', commentFile);\n    }\n\n    try {\n      let response: CommentResponse;\n      if (editingCommentId) {\n        const { data } = await axios.put<CommentResponse>(`http://localhost:8000/api/comment`, \n          { ...Object.fromEntries(formData), commentId: editingCommentId },\n          { headers: { 'Content-Type': 'application/json' } }\n        );\n        response = data;\n        setComments(prevComments => prevComments.map(comment => \n          comment.commentId === editingCommentId ? response.updatedAttributes : comment\n        ));\n      } else {\n        const { data } = await axios.post<CommentResponse>('http://localhost:8000/api/comment', formData, {\n          headers: { 'Content-Type': 'multipart/form-data' }\n        });\n        response = data;\n        setComments(prevComments => [...prevComments, response.comment]);\n      }\n      \n      setCommentContent('');\n      setCommentFile(null);\n      setSelectedText({ start: 0, end: 0, text: '' });\n      setEditingCommentId(null);\n    } catch (error) {\n      console.error('Error adding/updating comment:', error);\n      setError('Failed to add/update comment. Please try again.');\n    }\n  };\n\n  const deleteComment = async (commentId: string) => {\n    if (!selectedTranscript) return;\n    try {\n      await axios.delete(`http://localhost:8000/api/comment`, {\n        data: { transcriptId: selectedTranscript.transcriptId, commentId }\n      });\n      setComments(prevComments => prevComments.filter(comment => comment.commentId !== commentId));\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      setError('Failed to delete comment. Please try again.');\n    }\n  };\n\n  useEffect(() => {\n    if (selectedTranscript) {\n      fetchCommentsForTranscript(selectedTranscript.transcriptId);\n    }\n  }, [selectedTranscript]);\n\n  const fetchCommentsForTranscript = async (transcriptId: string) => {\n    try {\n      const response = await axios.get(`http://localhost:8000/api/comment?transcriptId=${transcriptId}`);\n      setComments(response.data);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n      setError('Failed to fetch comments. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Transcripts Dashboard</h1>\n      <button onClick={handleRecordButtonClick}>\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      <div className=\"file-upload\">\n        <input type=\"file\" onChange={handleFileChange} accept=\".txt,.json,.pdf\" />\n        <button onClick={handleFileUpload} disabled={!selectedFile}>\n          Upload Transcript\n        </button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n      {loading ? (\n        <p>Loading transcripts...</p>\n      ) : (\n        <div className=\"transcript-list\">\n          {transcripts.map((transcript) => (\n            <div\n              key={transcript.transcriptId}\n              className=\"transcript-item\"\n              onClick={() => handleTranscriptClick(transcript)}\n            >\n              <h3>{transcript.transcriptId}</h3>\n            </div>\n          ))}\n        </div>\n      )}\n      {selectedTranscript && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <div className=\"transcript-text\">\n              <h2>{selectedTranscript.transcriptId}</h2>\n              <div onMouseUp={handleTextSelection}>\n                {highlightText(selectedTranscript.content, comments)}\n              </div>\n            </div>\n            <div className=\"comment-controls\">\n              <textarea\n                value={commentContent}\n                onChange={(e) => setCommentContent(e.target.value)}\n                placeholder=\"Enter your comment\"\n              />\n              <select value={commentType} onChange={(e) => setCommentType(e.target.value)}>\n                <option value=\"positive\">Positive</option>\n                <option value=\"negative\">Negative</option>\n                <option value=\"suggestion\">Suggestion</option>\n              </select>\n              <input type=\"file\" onChange={(e) => e.target.files && setCommentFile(e.target.files[0])} />\n              <button onClick={addOrUpdateComment}>\n                {editingCommentId ? 'Update Comment' : 'Add Comment'}\n              </button>\n              {editingCommentId && (\n                <button onClick={() => {\n                  setEditingCommentId(null);\n                  setCommentContent('');\n                  setCommentType('positive');\n                  setCommentFile(null);\n                }}>\n                  Cancel Edit\n                </button>\n              )}\n              <div>\n                {comments.map(comment => (\n                  <div key={comment.commentId} style={{\n                    backgroundColor: comment.type === 'negative' ? 'lightcoral' : comment.type === 'positive' ? 'lightgreen' : 'lightyellow',\n                    padding: '10px',\n                    margin: '10px 0'\n                  }}>\n                    <p><strong>Selected text:</strong> {selectedTranscript.content.slice(comment.startIndex, comment.endIndex)}</p>\n                    <p><strong>Comment:</strong> {comment.content}</p>\n                    <p>Type: {comment.type}</p>\n                    {comment.fileAttachment && <a href={comment.fileAttachment}>Attached File</a>}\n                    <button onClick={() => deleteComment(comment.commentId)}>Delete</button>\n                    <button onClick={() => {\n                      setEditingCommentId(comment.commentId);\n                      setCommentContent(comment.content);\n                      setCommentType(comment.type);\n                      setSelectedText({\n                        start: comment.startIndex || 0,\n                        end: comment.endIndex || 0,\n                        text: selectedTranscript.content.slice(comment.startIndex, comment.endIndex)\n                      });\n                    }}>Edit</button>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <button onClick={() => setSelectedTranscript(null)}>Close</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}