{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extractTextContent = content => {\n  if (Array.isArray(content)) {\n    return content.map(utterance => utterance.text).join(' ');\n  } else if (typeof content === 'string') {\n    try {\n      const parsedContent = JSON.parse(content);\n      if (parsedContent.results && parsedContent.results.channels) {\n        return parsedContent.results.channels[0].alternatives[0].transcript;\n      }\n    } catch (error) {\n      // If parsing fails, return the original string\n    }\n    return content;\n  }\n  return 'No content available';\n};\nconst Dashboard = ({\n  onAudioRecordingStart,\n  onAudioRecordingStop\n}) => {\n  _s();\n  const [transcripts, setTranscripts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState(null);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [selectedText, setSelectedText] = useState({\n    start: 0,\n    end: 0,\n    text: ''\n  });\n  const [comments, setComments] = useState([]);\n  const [commentType, setCommentType] = useState('positive');\n  const [commentFile, setCommentFile] = useState(null);\n  const [commentContent, setCommentContent] = useState('');\n  const handleFileChange = event => {\n    if (event.target.files) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('transcript', selectedFile);\n    try {\n      const response = await axios.post('http://localhost:8000/upload-transcript', formData);\n      console.log('Transcript uploaded successfully:', response.data);\n      setSelectedFile(null);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading transcript:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload transcript: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload transcript. Please try again.');\n      }\n    }\n  };\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map(transcript => {\n        const extractedContent = extractTextContent(transcript.content);\n        console.log('Extracted content:', extractedContent);\n        return {\n          transcriptId: transcript.transcriptId.split('/').pop() || 'Unnamed Transcript',\n          content: extractedContent,\n          fileType: transcript.fileType\n        };\n      });\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n  const handleTranscriptClick = transcript => {\n    setSelectedTranscript(transcript);\n  };\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const start = range.startOffset;\n      const end = range.endOffset;\n      const text = selection.toString();\n      setSelectedText({\n        start,\n        end,\n        text\n      });\n    }\n  };\n  const addComment = async () => {\n    if (!selectedTranscript || !commentContent) return;\n    const formData = new FormData();\n    formData.append('transcriptId', selectedTranscript.transcriptId);\n    formData.append('userId', 'currentUserId'); // Replace with actual user ID\n    formData.append('content', commentContent);\n    formData.append('timestamp', new Date().toISOString());\n    formData.append('startIndex', selectedText.start.toString());\n    formData.append('endIndex', selectedText.end.toString());\n    formData.append('type', commentType);\n    if (commentFile) {\n      formData.append('fileAttachment', commentFile);\n    }\n    try {\n      const response = await axios.post('http://localhost:8000/api/comment', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setComments(prevComments => [...prevComments, response.data.comment]);\n      // Clear the comment content and file after adding a comment\n      setCommentContent('');\n      setCommentFile(null);\n      setSelectedText({\n        start: 0,\n        end: 0,\n        text: ''\n      });\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      setError('Failed to add comment. Please try again.');\n    }\n  };\n  const deleteComment = async commentId => {\n    if (!selectedTranscript) return;\n    try {\n      await axios.delete(`YOUR_API_ENDPOINT/comment/${selectedTranscript.transcriptId}/${commentId}`);\n      setComments(prevComments => prevComments.filter(comment => comment.commentId !== commentId));\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n  const updateComment = async (commentId, newContent, newType, newFile) => {\n    if (!selectedTranscript) return;\n    const formData = new FormData();\n    formData.append('transcriptId', selectedTranscript.transcriptId);\n    formData.append('commentId', commentId);\n    formData.append('content', newContent);\n    formData.append('type', newType);\n    if (newFile) {\n      formData.append('fileAttachment', newFile);\n    }\n    try {\n      const response = await axios.put(`YOUR_API_ENDPOINT/comment`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setComments(prevComments => prevComments.map(comment => comment.commentId === commentId ? response.data.comment : comment));\n    } catch (error) {\n      console.error('Error updating comment:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transcripts Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRecordButtonClick,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \".txt,.json,.pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        disabled: !selectedFile,\n        children: \"Upload Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading transcripts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-list\",\n      children: transcripts.map(transcript => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-item\",\n        onClick: () => handleTranscriptClick(transcript),\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: transcript.transcriptId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcript.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this)]\n      }, transcript.transcriptId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this), selectedTranscript && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedTranscript.transcriptId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onMouseUp: handleTextSelection,\n          children: extractTextContent(selectedTranscript.content)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: commentType,\n            onChange: e => setCommentType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"positive\",\n              children: \"Positive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"negative\",\n              children: \"Negative\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"suggestion\",\n              children: \"Suggestion\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: e => setCommentFile(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addComment,\n            children: \"Add Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: comment.type === 'negative' ? 'red' : 'yellow',\n              padding: '10px',\n              margin: '10px 0'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: comment.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this), comment.fileAttachment && /*#__PURE__*/_jsxDEV(\"a\", {\n              href: comment.fileAttachment,\n              children: \"Attached File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 46\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteComment(comment.commentId),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                const newContent = prompt('Enter new comment content:', comment.content);\n                const newType = prompt('Enter new comment type (positive, negative, suggestion):', comment.type);\n                if (newContent && newType) {\n                  updateComment(comment.commentId, newContent, newType, commentFile);\n                }\n              },\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 19\n            }, this)]\n          }, comment.commentId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedTranscript(null),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"1pKaujmmO736u/WZ+nqJVVkpxtg=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","extractTextContent","content","Array","isArray","map","utterance","text","join","parsedContent","JSON","parse","results","channels","alternatives","transcript","error","Dashboard","onAudioRecordingStart","onAudioRecordingStop","_s","transcripts","setTranscripts","loading","setLoading","setError","isRecording","setIsRecording","selectedTranscript","setSelectedTranscript","selectedFile","setSelectedFile","selectedText","setSelectedText","start","end","comments","setComments","commentType","setCommentType","commentFile","setCommentFile","commentContent","setCommentContent","handleFileChange","event","target","files","handleFileUpload","formData","FormData","append","response","post","console","log","data","fetchTranscripts","isAxiosError","message","get","formattedTranscripts","extractedContent","transcriptId","split","pop","fileType","handleRecordButtonClick","audioBlob","uploadAudio","handleTranscriptClick","handleTextSelection","selection","window","getSelection","rangeCount","range","getRangeAt","startOffset","endOffset","toString","addComment","Date","toISOString","headers","prevComments","comment","deleteComment","commentId","delete","filter","updateComment","newContent","newType","newFile","put","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","accept","disabled","onMouseUp","value","e","style","backgroundColor","padding","margin","fileAttachment","href","prompt","_c","$RefreshReg$"],"sources":["/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\n\n\ninterface Utterance {\n  speaker: string;\n  text: string;\n}\n\ninterface Transcript {\n  transcriptId: string;\n  content: string;\n  fileType: string;\n}\n\ninterface DashboardProps {\n  onAudioRecordingStart: () => void;\n  onAudioRecordingStop: () => Promise<Blob | null>;\n}\n\nconst extractTextContent = (content: Utterance[] | string): string => {\n  if (Array.isArray(content)) {\n    return content.map(utterance => utterance.text).join(' ');\n  } else if (typeof content === 'string') {\n    try {\n      const parsedContent = JSON.parse(content);\n      if (parsedContent.results && parsedContent.results.channels) {\n        return parsedContent.results.channels[0].alternatives[0].transcript;\n      }\n    } catch (error) {\n      // If parsing fails, return the original string\n    }\n    return content;\n  }\n  return 'No content available';\n};\n\nconst Dashboard: React.FC<DashboardProps> = ({ onAudioRecordingStart, onAudioRecordingStop }) => {\n  const [transcripts, setTranscripts] = useState<Transcript[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState<Transcript | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedText, setSelectedText] = useState({ start: 0, end: 0, text: '' });\n  const [comments, setComments] = useState<Array<{\n    commentId: string;\n    content: string;\n    type: string;\n    fileAttachment?: string;\n  }>>([]);\n  const [commentType, setCommentType] = useState('positive');\n  const [commentFile, setCommentFile] = useState<File | null>(null);\n  const [commentContent, setCommentContent] = useState('');\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('transcript', selectedFile);\n\n    try {\n      const response = await axios.post('http://localhost:8000/upload-transcript', formData);\n      console.log('Transcript uploaded successfully:', response.data);\n      setSelectedFile(null);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading transcript:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload transcript: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload transcript. Please try again.');\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get<Transcript[]>('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map((transcript) => {\n        const extractedContent = extractTextContent(transcript.content);\n        console.log('Extracted content:', extractedContent);\n        return {\n          transcriptId: transcript.transcriptId.split('/').pop() || 'Unnamed Transcript',\n          content: extractedContent,\n          fileType: transcript.fileType\n        };\n      });\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n\n  const uploadAudio = async (audioBlob: Blob) => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n\n  const handleTranscriptClick = (transcript: Transcript) => {\n    setSelectedTranscript(transcript);\n  };\n\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      const range = selection.getRangeAt(0);\n      const start = range.startOffset;\n      const end = range.endOffset;\n      const text = selection.toString();\n      setSelectedText({ start, end, text });\n    }\n  };\n\n  const addComment = async () => {\n    if (!selectedTranscript || !commentContent) return;\n\n    const formData = new FormData();\n    formData.append('transcriptId', selectedTranscript.transcriptId);\n    formData.append('userId', 'currentUserId'); // Replace with actual user ID\n    formData.append('content', commentContent);\n    formData.append('timestamp', new Date().toISOString());\n    formData.append('startIndex', selectedText.start.toString());\n    formData.append('endIndex', selectedText.end.toString());\n    formData.append('type', commentType);\n    if (commentFile) {\n      formData.append('fileAttachment', commentFile);\n    }\n\n    try {\n      const response = await axios.post('http://localhost:8000/api/comment', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      setComments(prevComments => [...prevComments, response.data.comment]);\n      // Clear the comment content and file after adding a comment\n      setCommentContent('');\n      setCommentFile(null);\n      setSelectedText({ start: 0, end: 0, text: '' });\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      setError('Failed to add comment. Please try again.');\n    }\n  };\n\n  const deleteComment = async (commentId: string) => {\n    if (!selectedTranscript) return;\n    try {\n      await axios.delete(`YOUR_API_ENDPOINT/comment/${selectedTranscript.transcriptId}/${commentId}`);\n      setComments(prevComments => prevComments.filter(comment => comment.commentId !== commentId));\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  const updateComment = async (commentId: string, newContent: string, newType: string, newFile: File | null) => {\n    if (!selectedTranscript) return;\n    const formData = new FormData();\n    formData.append('transcriptId', selectedTranscript.transcriptId);\n    formData.append('commentId', commentId);\n    formData.append('content', newContent);\n    formData.append('type', newType);\n    if (newFile) {\n      formData.append('fileAttachment', newFile);\n    }\n\n    try {\n      const response = await axios.put(`YOUR_API_ENDPOINT/comment`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      setComments(prevComments => prevComments.map(comment => \n        comment.commentId === commentId ? response.data.comment : comment\n      ));\n    } catch (error) {\n      console.error('Error updating comment:', error);\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Transcripts Dashboard</h1>\n      <button onClick={handleRecordButtonClick}>\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      <div className=\"file-upload\">\n        <input type=\"file\" onChange={handleFileChange} accept=\".txt,.json,.pdf\" />\n        <button onClick={handleFileUpload} disabled={!selectedFile}>\n          Upload Transcript\n        </button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n      {loading ? (\n        <p>Loading transcripts...</p>\n      ) : (\n        <div className=\"transcript-list\">\n          {transcripts.map((transcript) => (\n            <div\n              key={transcript.transcriptId}\n              className=\"transcript-item\"\n              onClick={() => handleTranscriptClick(transcript)}\n            >\n              <h3>{transcript.transcriptId}</h3>\n              <p>{transcript.content}</p>\n            </div>\n          ))}\n        </div>\n      )}\n      {selectedTranscript && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <h2>{selectedTranscript.transcriptId}</h2>\n            <div onMouseUp={handleTextSelection}>\n              {extractTextContent(selectedTranscript.content)}\n            </div>\n            <div>\n              <select value={commentType} onChange={(e) => setCommentType(e.target.value)}>\n                <option value=\"positive\">Positive</option>\n                <option value=\"negative\">Negative</option>\n                <option value=\"suggestion\">Suggestion</option>\n              </select>\n              <input type=\"file\" onChange={(e) => setCommentFile(e.target.files[0])} />\n              <button onClick={addComment}>Add Comment</button>\n            </div>\n            <div>\n              {comments.map(comment => (\n                <div key={comment.commentId} style={{\n                  backgroundColor: comment.type === 'negative' ? 'red' : 'yellow',\n                  padding: '10px',\n                  margin: '10px 0'\n                }}>\n                  <p>{comment.content}</p>\n                  {comment.fileAttachment && <a href={comment.fileAttachment}>Attached File</a>}\n                  <button onClick={() => deleteComment(comment.commentId)}>Delete</button>\n                  <button onClick={() => {\n                    const newContent = prompt('Enter new comment content:', comment.content);\n                    const newType = prompt('Enter new comment type (positive, negative, suggestion):', comment.type);\n                    if (newContent && newType) {\n                      updateComment(comment.commentId, newContent, newType, commentFile);\n                    }\n                  }}>Edit</button>\n                </div>\n              ))}\n            </div>\n            <button onClick={() => setSelectedTranscript(null)}>Close</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}