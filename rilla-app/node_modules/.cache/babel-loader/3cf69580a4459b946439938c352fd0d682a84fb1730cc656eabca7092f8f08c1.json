{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  onAudioRecordingStart,\n  onAudioRecordingStop\n}) => {\n  _s();\n  const [transcripts, setTranscripts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState(null);\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8000/api/transcripts');\n      setTranscripts(response.data);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n  const handleTranscriptClick = transcript => {\n    setSelectedTranscript(transcript);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading transcripts...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transcripts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRecordButtonClick,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), transcripts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transcripts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transcripts.map(transcript => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleTranscriptClick(transcript),\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: transcript.transcriptId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Created at: \", new Date(transcript.createdAt).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [transcript.content.substring(0, 100), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this)]\n      }, transcript.transcriptId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), selectedTranscript && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: selectedTranscript.transcriptId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Created at: \", new Date(selectedTranscript.createdAt).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedTranscript.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTranscript(null),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"slVifBll3xMLCSogKWy3JOFuaZ4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Dashboard","onAudioRecordingStart","onAudioRecordingStop","_s","transcripts","setTranscripts","loading","setLoading","error","setError","isRecording","setIsRecording","selectedTranscript","setSelectedTranscript","fetchTranscripts","response","get","data","console","handleRecordButtonClick","audioBlob","uploadAudio","formData","FormData","append","post","log","isAxiosError","message","handleTranscriptClick","transcript","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","length","map","transcriptId","Date","createdAt","toLocaleString","content","substring","_c","$RefreshReg$"],"sources":["/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Dashboard.css';\n\ninterface Transcript {\n  transcriptId: string;\n  content: string;\n  createdAt: string;\n}\n\ninterface DashboardProps {\n  onAudioRecordingStart: () => void;\n  onAudioRecordingStop: () => Promise<Blob | undefined>;\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ onAudioRecordingStart, onAudioRecordingStop }) => {\n  const [transcripts, setTranscripts] = useState<Transcript[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedTranscript, setSelectedTranscript] = useState<Transcript | null>(null);\n\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get<Transcript[]>('http://localhost:8000/api/transcripts');\n      setTranscripts(response.data);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n\n  const uploadAudio = async (audioBlob: Blob) => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n\n  const handleTranscriptClick = (transcript: Transcript) => {\n    setSelectedTranscript(transcript);\n  };\n\n  if (loading) return <div>Loading transcripts...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"dashboard\">\n      <h2>Transcripts</h2>\n      <button onClick={handleRecordButtonClick}>\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      {transcripts.length === 0 ? (\n        <p>No transcripts available.</p>\n      ) : (\n        <ul>\n          {transcripts.map((transcript) => (\n            <li key={transcript.transcriptId} onClick={() => handleTranscriptClick(transcript)}>\n              <strong>{transcript.transcriptId}</strong>\n              <p>Created at: {new Date(transcript.createdAt).toLocaleString()}</p>\n              <p>{transcript.content.substring(0, 100)}...</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {selectedTranscript && (\n        <div className=\"transcript-modal\">\n          <h3>{selectedTranscript.transcriptId}</h3>\n          <p>Created at: {new Date(selectedTranscript.createdAt).toLocaleString()}</p>\n          <p>{selectedTranscript.content}</p>\n          <button onClick={() => setSelectedTranscript(null)}>Close</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}