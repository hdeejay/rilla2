{"ast":null,"code":"const ENV_ENDPOINT_DISCOVERY = [\"AWS_ENABLE_ENDPOINT_DISCOVERY\", \"AWS_ENDPOINT_DISCOVERY_ENABLED\"];\nconst CONFIG_ENDPOINT_DISCOVERY = \"endpoint_discovery_enabled\";\nconst isFalsy = value => [\"false\", \"0\"].indexOf(value) >= 0;\nexport const NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {\n  environmentVariableSelector: env => {\n    for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {\n      const envKey = ENV_ENDPOINT_DISCOVERY[i];\n      if (envKey in env) {\n        const value = env[envKey];\n        if (value === \"\") {\n          throw Error(`Environment variable ${envKey} can't be empty of undefined, got \"${value}\"`);\n        }\n        return !isFalsy(value);\n      }\n    }\n  },\n  configFileSelector: profile => {\n    if (CONFIG_ENDPOINT_DISCOVERY in profile) {\n      const value = profile[CONFIG_ENDPOINT_DISCOVERY];\n      if (value === undefined) {\n        throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got \"${value}\"`);\n      }\n      return !isFalsy(value);\n    }\n  },\n  default: undefined\n};","map":{"version":3,"names":["ENV_ENDPOINT_DISCOVERY","CONFIG_ENDPOINT_DISCOVERY","isFalsy","value","indexOf","NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS","environmentVariableSelector","env","i","length","envKey","Error","configFileSelector","profile","undefined","default"],"sources":["/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/node_modules/@aws-sdk/middleware-endpoint-discovery/dist-es/configurations.js"],"sourcesContent":["const ENV_ENDPOINT_DISCOVERY = [\"AWS_ENABLE_ENDPOINT_DISCOVERY\", \"AWS_ENDPOINT_DISCOVERY_ENABLED\"];\nconst CONFIG_ENDPOINT_DISCOVERY = \"endpoint_discovery_enabled\";\nconst isFalsy = (value) => [\"false\", \"0\"].indexOf(value) >= 0;\nexport const NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {\n            const envKey = ENV_ENDPOINT_DISCOVERY[i];\n            if (envKey in env) {\n                const value = env[envKey];\n                if (value === \"\") {\n                    throw Error(`Environment variable ${envKey} can't be empty of undefined, got \"${value}\"`);\n                }\n                return !isFalsy(value);\n            }\n        }\n    },\n    configFileSelector: (profile) => {\n        if (CONFIG_ENDPOINT_DISCOVERY in profile) {\n            const value = profile[CONFIG_ENDPOINT_DISCOVERY];\n            if (value === undefined) {\n                throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got \"${value}\"`);\n            }\n            return !isFalsy(value);\n        }\n    },\n    default: undefined,\n};\n"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,CAAC,+BAA+B,EAAE,gCAAgC,CAAC;AAClG,MAAMC,yBAAyB,GAAG,4BAA4B;AAC9D,MAAMC,OAAO,GAAIC,KAAK,IAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAACC,OAAO,CAACD,KAAK,CAAC,IAAI,CAAC;AAC7D,OAAO,MAAME,sCAAsC,GAAG;EAClDC,2BAA2B,EAAGC,GAAG,IAAK;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,sBAAsB,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;MACpD,MAAME,MAAM,GAAGV,sBAAsB,CAACQ,CAAC,CAAC;MACxC,IAAIE,MAAM,IAAIH,GAAG,EAAE;QACf,MAAMJ,KAAK,GAAGI,GAAG,CAACG,MAAM,CAAC;QACzB,IAAIP,KAAK,KAAK,EAAE,EAAE;UACd,MAAMQ,KAAK,CAAC,wBAAwBD,MAAM,sCAAsCP,KAAK,GAAG,CAAC;QAC7F;QACA,OAAO,CAACD,OAAO,CAACC,KAAK,CAAC;MAC1B;IACJ;EACJ,CAAC;EACDS,kBAAkB,EAAGC,OAAO,IAAK;IAC7B,IAAIZ,yBAAyB,IAAIY,OAAO,EAAE;MACtC,MAAMV,KAAK,GAAGU,OAAO,CAACZ,yBAAyB,CAAC;MAChD,IAAIE,KAAK,KAAKW,SAAS,EAAE;QACrB,MAAMH,KAAK,CAAC,uBAAuBV,yBAAyB,6BAA6BE,KAAK,GAAG,CAAC;MACtG;MACA,OAAO,CAACD,OAAO,CAACC,KAAK,CAAC;IAC1B;EACJ,CAAC;EACDY,OAAO,EAAED;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}