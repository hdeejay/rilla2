{"ast":null,"code":"var _jsxFileName = \"/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  onAudioRecordingStart,\n  onAudioRecordingStop\n}) => {\n  _s();\n  const [transcripts, setTranscripts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map((transcript, index) => ({\n        transcriptId: `Transcript ${index + 1}`,\n        content: transcript.content\n      }));\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transcripts Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRecordButtonClick,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading transcripts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-list\",\n      children: transcripts.map(transcript => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: transcript.transcriptId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcript.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)]\n      }, transcript.transcriptId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"jOBdiXXsKAv6frl6KuxeCY6MUPA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Dashboard","onAudioRecordingStart","onAudioRecordingStop","_s","transcripts","setTranscripts","loading","setLoading","error","setError","isRecording","setIsRecording","fetchTranscripts","response","get","formattedTranscripts","data","map","transcript","index","transcriptId","content","console","handleRecordButtonClick","audioBlob","uploadAudio","formData","FormData","append","post","log","isAxiosError","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/hamzahdeejay/Rilla-BackEnd/rilla-app/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\ninterface Transcript {\n  transcriptId: string;\n  content: string;\n}\n\ninterface DashboardProps {\n  onAudioRecordingStart: () => void;\n  onAudioRecordingStop: () => Promise<Blob | null>;\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ onAudioRecordingStart, onAudioRecordingStop }) => {\n  const [transcripts, setTranscripts] = useState<Transcript[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n\n  useEffect(() => {\n    fetchTranscripts();\n  }, []);\n\n  const fetchTranscripts = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get<Transcript[]>('http://localhost:8000/api/transcripts');\n      const formattedTranscripts = response.data.map((transcript, index) => ({\n        transcriptId: `Transcript ${index + 1}`,\n        content: transcript.content\n      }));\n      setTranscripts(formattedTranscripts);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching transcripts:', error);\n      setError('Failed to fetch transcripts. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRecordButtonClick = async () => {\n    if (isRecording) {\n      const audioBlob = await onAudioRecordingStop();\n      setIsRecording(false);\n      if (audioBlob) {\n        await uploadAudio(audioBlob);\n      }\n    } else {\n      onAudioRecordingStart();\n      setIsRecording(true);\n    }\n  };\n\n  const uploadAudio = async (audioBlob: Blob) => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recorded_audio.wav');\n    try {\n      const response = await axios.post('http://localhost:8000/upload-audio', formData);\n      console.log('Audio uploaded and transcribed successfully:', response.data);\n      fetchTranscripts(); // Refresh the transcript list\n    } catch (error) {\n      console.error('Error uploading and transcribing audio:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setError(`Failed to upload and transcribe audio: ${error.response.data.message || error.message}`);\n      } else {\n        setError('Failed to upload and transcribe audio. Please try again.');\n      }\n    }\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Transcripts Dashboard</h1>\n      <button onClick={handleRecordButtonClick}>\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\n      </button>\n      {error && <p className=\"error\">{error}</p>}\n      {loading ? (\n        <p>Loading transcripts...</p>\n      ) : (\n        <div className=\"transcript-list\">\n          {transcripts.map((transcript) => (\n            <div key={transcript.transcriptId} className=\"transcript-item\">\n              <h3>{transcript.transcriptId}</h3>\n              <p>{transcript.content}</p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAY1B,MAAMC,SAAmC,GAAGA,CAAC;EAAEC,qBAAqB;EAAEC;AAAqB,CAAC,KAAK;EAAAC,EAAA;EAC/F,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAe,EAAE,CAAC;EAChE,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACdgB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACFL,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMM,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAe,uCAAuC,CAAC;MACvF,MAAMC,oBAAoB,GAAGF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,MAAM;QACrEC,YAAY,EAAE,cAAcD,KAAK,GAAG,CAAC,EAAE;QACvCE,OAAO,EAAEH,UAAU,CAACG;MACtB,CAAC,CAAC,CAAC;MACHhB,cAAc,CAACU,oBAAoB,CAAC;MACpCN,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdc,OAAO,CAACd,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDC,QAAQ,CAAC,sDAAsD,CAAC;IAClE,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMgB,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAIb,WAAW,EAAE;MACf,MAAMc,SAAS,GAAG,MAAMtB,oBAAoB,CAAC,CAAC;MAC9CS,cAAc,CAAC,KAAK,CAAC;MACrB,IAAIa,SAAS,EAAE;QACb,MAAMC,WAAW,CAACD,SAAS,CAAC;MAC9B;IACF,CAAC,MAAM;MACLvB,qBAAqB,CAAC,CAAC;MACvBU,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,MAAMc,WAAW,GAAG,MAAOD,SAAe,IAAK;IAC7C,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,SAAS,EAAE,oBAAoB,CAAC;IACzD,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMhB,KAAK,CAACgC,IAAI,CAAC,oCAAoC,EAAEH,QAAQ,CAAC;MACjFJ,OAAO,CAACQ,GAAG,CAAC,8CAA8C,EAAEjB,QAAQ,CAACG,IAAI,CAAC;MAC1EJ,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdc,OAAO,CAACd,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,IAAIX,KAAK,CAACkC,YAAY,CAACvB,KAAK,CAAC,IAAIA,KAAK,CAACK,QAAQ,EAAE;QAC/CJ,QAAQ,CAAC,0CAA0CD,KAAK,CAACK,QAAQ,CAACG,IAAI,CAACgB,OAAO,IAAIxB,KAAK,CAACwB,OAAO,EAAE,CAAC;MACpG,CAAC,MAAM;QACLvB,QAAQ,CAAC,0DAA0D,CAAC;MACtE;IACF;EACF,CAAC;EAED,oBACEV,OAAA;IAAKkC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBnC,OAAA;MAAAmC,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BvC,OAAA;MAAQwC,OAAO,EAAEhB,uBAAwB;MAAAW,QAAA,EACtCxB,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,EACR9B,KAAK,iBAAIT,OAAA;MAAGkC,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAE1B;IAAK;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzChC,OAAO,gBACNP,OAAA;MAAAmC,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE7BvC,OAAA;MAAKkC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7B9B,WAAW,CAACa,GAAG,CAAEC,UAAU,iBAC1BnB,OAAA;QAAmCkC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC5DnC,OAAA;UAAAmC,QAAA,EAAKhB,UAAU,CAACE;QAAY;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAClCvC,OAAA;UAAAmC,QAAA,EAAIhB,UAAU,CAACG;QAAO;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFnBpB,UAAU,CAACE,YAAY;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAG5B,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnC,EAAA,CA/EIH,SAAmC;AAAAwC,EAAA,GAAnCxC,SAAmC;AAiFzC,eAAeA,SAAS;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}